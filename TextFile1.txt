ab tak jo mkene kis uska code neche da raha hoon wo dakho zara or batao or kia add karna chaie 
program.cs
using StudentManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Internal;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();


//builder.Services.AddSingleton<IStudentRepository, FakeDbRepository>();




builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DatabaseConnection")));

var app = builder.Build();

using (var scope =app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<AppDbContext>();
    context.Database.EnsureCreated();
    DbInitializer.Seed(context);
}

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Students}/{action=Index}/{id?}");

app.Run();

appsettings.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
  "DatabaseConnection": "Server=.;Database=StudentManagementSystemDB;Trusted_Connection=True;TrustServerCertificate=True;"
  },
  "AllowedHosts": "*"
}
models
Student.cs
using StudentManagementSystem.Controllers;
using StudentManagementSystem.Data;
using System.ComponentModel.DataAnnotations;

namespace StudentManagementSystem.Models
{
	public class Student
	{
		public int Id { get; set; }

		[Required(ErrorMessage = "Name Required")]
		[StringLength(100, ErrorMessage = "Name Length Cant Exceed 100 Characters.")]
		public string Name { get; set; }

		[Required(ErrorMessage = "Email Required")]
		[EmailAddress(ErrorMessage = "Correct Email Format Required")]
		public string Email { get; set; }

		[Required(ErrorMessage = "Phone Required")]
		[Phone(ErrorMessage = "Correct Phone Format Required.")]
		public string Phone { get; set; }

		public string Class { get; set; }

		public int RollNo { get; set; }

		public ICollection<StudentResult> Results { get; set; } = new List<StudentResult>();
	}
}
models
studentresult.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace StudentManagementSystem.Models
{
	public class StudentResult
	{
		public int Id { get; set; }

		[Required]
		public int StudentId { get; set; }

		[Required]
		[StringLength(100)]
		public string Subject { get; set; }

		[Required]
		[Range(0, 1000)]
		public int Marks { get; set; }

		[Required]
		[Range(1, 1000)]
		public int MaxMarks { get; set; } = 100;

		// Navigation
		public Student Student { get; set; }
	}
}
models
summaryviewmodel.cs
namespace StudentManagementSystem.Models
{
	public class StudentSummaryViewModel
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public int SubjectsCount { get; set; }
		public int TotalMarks { get; set; }
		public int MaxMarks { get; set; }
		public double Percentage { get; set; }
	}
}
baqi code neche msg me da raha hoon isko check karo tab tak


controller
studentscontroller.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using StudentManagementSystem.Data;
using StudentManagementSystem.Models;

namespace StudentManagementSystem.Controllers
{
	public class StudentsController : Controller
	{
		private readonly AppDbContext _context;

		public StudentsController (AppDbContext context)
		{
			_context = context;
		}
		public IActionResult Index(string search, string SortOrder)
		{
			ViewBag.NameSort = SortOrder == "Ascending" ? "Descending" : "Ascending";

			var students = _context.Students.ToList();

			if (!string.IsNullOrEmpty(search))
				{
				students = students.Where(student => student.Name.Contains(search, StringComparison.OrdinalIgnoreCase) ||student.Email.Contains(search, StringComparison.OrdinalIgnoreCase) ||student.Phone.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
			}

		
			switch (SortOrder)
			{
				case "Ascending":
					students = students.OrderBy(student => student.Name).ToList();
					break;

				case "Descending":
					students = students.OrderByDescending(student => student.Name).ToList();
					break;
			}
			return View(students);
		}

		[HttpGet]

		public IActionResult Create() 
		{
			return View();
		}

		[HttpPost]
		public IActionResult Create(Student student)
		{
			if (ModelState.IsValid)
			{
				_context.Students.Add(student);
				_context.SaveChanges();
				return RedirectToAction(nameof(Index));
			}
			else
			{
				return View(student);
			}
		}

		[HttpGet]

		public IActionResult Edit(int id)
		{
			var edit = _context.Students.Find(id);
			if (edit == null)
			{
				return NotFound();
			}

			else
			{
				return View(edit);
			}
		}

		[HttpPost]
		public IActionResult Edit (Student student)
		{
			if (ModelState.IsValid)
			{
				_context.Students.Update(student);
				_context.SaveChanges();
				return RedirectToAction(nameof(Index));
			}

			else
			{
				return View(student);
			}
		}

		[HttpGet]
		public IActionResult Delete (int id)
		{
			var delete = _context.Students.Find(id);
			if (delete == null)
			{
				return NotFound();
			}
			else
			{
				return View(delete);
			}
		}

		[HttpPost, ActionName("Delete")]

		public IActionResult DeleteConfirmed(int id)
		{
			var delete = _context.Students.Find(id);
			if (delete == null)
			{
				return NotFound();
			}
			else
			{
				_context.Students.Remove(delete);
				_context.SaveChanges();
				return RedirectToAction(nameof(Index));
			}
		}

		public IActionResult Details(int id)
		{
			var details = _context.Students.Find(id);
			if (details == null)
			{
				return NotFound();
			}
			else
			{
				return View(details);
			}
		}

		public async Task<IActionResult> Summary()
		{
			var students = await _context.Students.Include(s => s.Results).ToListAsync();

			var model = students.Select(s => new StudentSummaryViewModel
			{
				Id = s.Id,
				Name = s.Name,
				SubjectsCount = s.Results.Count,
				TotalMarks = s.Results.Sum(r => r.Marks),
				MaxMarks = s.Results.Sum(r => r.MaxMarks),
				Percentage = (s.Results.Sum(r => r.MaxMarks) > 0) ?
					Math.Round((double)s.Results.Sum(r => r.Marks) / s.Results.Sum(r => r.MaxMarks) * 100, 2) : 0
			}).ToList();

			return View(model);
		}


	}
}
controller
resultscontroller.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using StudentManagementSystem.Data;
using StudentManagementSystem.Models;
using System.Linq;
using System.Threading.Tasks;

namespace StudentManagementSystem.Controllers
{
	public class ResultsController : Controller
	{
		private readonly AppDbContext _context;
		public ResultsController(AppDbContext context)
		{
			_context = context;
		}

		// Index: list all results with student name
		public async Task<IActionResult> Index()
		{
			var results = await _context.StudentResults
				.Include(r => r.Student)
				.OrderByDescending(r => r.Id)
				.ToListAsync();
			return View(results);
		}

		// Create GET
		public IActionResult Create(int? studentId)
		{
			ViewData["Students"] = new SelectList(_context.Students.OrderBy(s => s.Name), "Id", "Name", studentId);
			return View();
		}

		// Create POST
		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> Create(StudentResult result)
		{
			if (ModelState.IsValid)
			{
				_context.Add(result);
				await _context.SaveChangesAsync();
				return RedirectToAction(nameof(Index));
			}
			ViewData["Students"] = new SelectList(_context.Students.OrderBy(s => s.Name), "Id", "Name", result.StudentId);
			return View(result);
		}

		// Edit GET
		public async Task<IActionResult> Edit(int? id)
		{
			if (id == null) return NotFound();
			var result = await _context.StudentResults.FindAsync(id);
			if (result == null) return NotFound();
			ViewData["Students"] = new SelectList(_context.Students.OrderBy(s => s.Name), "Id", "Name", result.StudentId);
			return View(result);
		}

		// Edit POST
		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> Edit(int id, StudentResult result)
		{
			if (id != result.Id) return NotFound();
			if (ModelState.IsValid)
			{
				try
				{
					_context.Update(result);
					await _context.SaveChangesAsync();
				}
				catch (DbUpdateConcurrencyException)
				{
					if (!_context.StudentResults.Any(r => r.Id == result.Id)) return NotFound();
					else throw;
				}
				return RedirectToAction(nameof(Index));
			}
			ViewData["Students"] = new SelectList(_context.Students.OrderBy(s => s.Name), "Id", "Name", result.StudentId);
			return View(result);
		}

		// Delete GET (confirm)
		public async Task<IActionResult> Delete(int? id)
		{
			if (id == null) return NotFound();
			var result = await _context.StudentResults.Include(r => r.Student).FirstOrDefaultAsync(r => r.Id == id);
			if (result == null) return NotFound();
			return View(result);
		}

		// Delete POST
		[HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> DeleteConfirmed(int id)
		{
			var result = await _context.StudentResults.FindAsync(id);
			if (result != null)
			{
				_context.StudentResults.Remove(result);
				await _context.SaveChangesAsync();
			}
			return RedirectToAction(nameof(Index));
		}

		// Optional: Details
		public async Task<IActionResult> Details(int? id)
		{
			if (id == null) return NotFound();
			var result = await _context.StudentResults.Include(r => r.Student).FirstOrDefaultAsync(r => r.Id == id);
			if (result == null) return NotFound();
			return View(result);
		}
	}
}
data
IStudentReposityory
using StudentManagementSystem.Controllers;
using StudentManagementSystem.Models;

namespace StudentManagementSystem.Data
{
	public interface IStudentRepository
	{
		List<Student> GetAll();

		Student? GetById(int id);

		void Add(Student student);

		void Update(Student student);

		void Delete(int id);
	}
}
data
FakeDbRepository
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using StudentManagementSystem.Controllers;
using StudentManagementSystem.Models;

namespace StudentManagementSystem.Data
{
	public class FakeDbRepository : IStudentRepository
	{
		private List<Student> AllStudents = new List<Student>()
		{
			new Student{Id=1, Name="Student1", Email="student1@gmail.com", Phone="03111111111",	Class="Nursery", RollNo=78585},
			new Student{Id=2, Name="Student2", Email="student2@gmail.com", Phone="03222222222", Class="Kg", RollNo=12589},
			new Student{Id=3, Name="Student3", Email="student3@gmail.com", Phone="03333333333", Class="Class1", RollNo=25845},
			new Student{Id=4, Name="Student4", Email="student4@gmail.com", Phone="03444444444", Class="Class2", RollNo=25752},
			new Student{Id=5, Name="Student5", Email="student5@gmail.com", Phone="03555555555", Class="Class3", RollNo=25456},
		};

		public List<Student> GetAll() => AllStudents.OrderBy(student => student.Id).ToList();

		public Student? GetById(int id) => AllStudents.FirstOrDefault(student => student.Id == id);

		public void Add(Student student)
		{
			if (AllStudents.Count == 0)
			{
				student.Id = 1;
			}
			else
			{
				student.Id = AllStudents.Max(student => student.Id)+1;
			}
			AllStudents.Add(student);
		}

		public void Update (Student student)
		{
			var existing = GetById(student.Id);
			if (existing == null)
			{
				return;
			}
			else
			{
				existing.Name = student.Name;
				existing.Email = student.Email;
				existing.Phone = student.Phone;
				existing.Class = student.Class;
				existing.RollNo = student.RollNo;
			}

		}

		public void Delete (int id)
		{
			var delete = GetById(id);
			if (delete == null)
			{
				return;
			}
			else
			{
				AllStudents.Remove(delete);
			}
		}

		}
	}
data
AppDbCpntext.cs
using Microsoft.EntityFrameworkCore;
using StudentManagementSystem.Models;

namespace StudentManagementSystem.Data
{
	public class AppDbContext : DbContext
	{
		public AppDbContext (DbContextOptions<AppDbContext>options) : base (options)
		{

		}

		public DbSet <Student> Students { get; set; }

		public DbSet<StudentResult> StudentResults { get; set; }

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);

			// optional: FK config (EF usually detects it)
			modelBuilder.Entity<StudentResult>()
				.HasOne(r => r.Student)
				.WithMany(s => s.Results)
				.HasForeignKey(r => r.StudentId)
				.OnDelete(DeleteBehavior.Cascade);
		}
	}
}

data
appdbcontextfactory.cs
using StudentManagementSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;
using System.IO;

namespace StudentManagementSystem.Data
{
	public class AppDbContextFactory : IDesignTimeDbContextFactory<AppDbContext>
	{
		public AppDbContext CreateDbContext(string[] args)
		{
			var configuration = new ConfigurationBuilder()
				.SetBasePath(Directory.GetCurrentDirectory())
				.AddJsonFile("appsettings.json").Build();

			var optionsBuilder = new DbContextOptionsBuilder<AppDbContext>();
			optionsBuilder.UseSqlServer(configuration.GetConnectionString("DatabaseConnection"));

			return new AppDbContext(optionsBuilder.Options);
		}
	}
}
 
views
students
@model List<StudentManagementSystem.Models.Student>

<h1 class="text-center"><a asp-action="Index" style="text-decoration:none;"><font color="black">Students List</font></a></h1>

    <form asp-action="Index" method="get" class="text-center mb-3">
        <input type="text" name="search" placeholder="Search By Name, Email Or Phone" style="width:300px; display:inline;" value="@Context.Request.Query["search"]" />
        <button type="submit" class="btn btn-warning">Search</button>
    </form>

    <table class="table table-bordered">

        <thead>
            <tr>
                <th>S.No</th>
            <th><a name="sort" asp-action="Index" asp-route-SortOrder="@ViewBag.NameSort" asp-route-search="@Context.Request.Query["search"]" style="text-decoration:none;" ><font color="black">Name</font></a></th>
                <th>Roll No</th>
                <th>Class</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Action</th>
            </tr>
        </thead>

        <tbody>

        @{
            int sNo = 1;
            @foreach (var student in Model)
            {
            <tr>

                <td>@sNo</td>
                <td>@student.Name</td>
                <td>@student.RollNo</td>
                <td>@student.Class</td>
                <td>@student.Email</td>
                <td>@student.Phone</td>
                <td>

                <a asp-action="Edit" class="btn btn-warning" asp-route-id="@student.Id">Edit</a>
                        <a asp-action="Delete" class="btn btn-danger" asp-route-id="@student.Id">Delete</a>

                </td>

            </tr>
             sNo++;
        }
        
            }
        </tbody>

    </table>
  <p>
      <a asp-action="Create" class="btn btn-success">Create New Contact</a>
  </p>
views
students
@model StudentManagementSystem.Models.Student

<h1 class="text-center">Add New Student</h1>

<form asp-action="Create" method="post" class="form-control">

    <table class="table table-bordered">

        <tr>
            <th><label asp-for="Name"></label></th>
            <td><input asp-for="Name" class="form-control"/><span asp-validation-for="Name" style="color:red;"></span></td>
        </tr>
        
        <tr>
            <th><label asp-for="RollNo"></label></th>
            <td><input asp-for="RollNo" class="form-control"/><span asp-validation-for="RollNo" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Class"></label></th>
            <td><input asp-for="Class" class="form-control"/><span asp-validation-for="Class" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Email"></label></th>
            <td><input asp-for="Email" class="form-control" /><span asp-validation-for="Email" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Phone"></label></th>
            <td><input asp-for="Phone" class="form-control" /><span asp-validation-for="Phone" style="color:red;"></span></td>
        </tr>

        <tr>
            <td colspan="2" class="text-center">
                <button type="submit" class="btn btn-warning">Save</button>
                <a asp-action="Index" class="btn btn-success">Cancel</a>
            </td>
        </tr>

            
    </table>

</form>

            @section Scripts
            {
@{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
            }

views
students
edit
@model StudentManagementSystem.Models.Student

<h1 class="text-center">Edit Student Data</h1>

<form asp-action="Edit" method="post" class="form-control">
    <input type="hidden" asp-for="Id"/> 

    <table class="table table-bordered">

        <tr>
            <th><label asp-for="Name"></label></th>
            <td><input asp-for="Name" class="form-control" /><span asp-validation-for="Name" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="RollNo"></label></th>
            <td><input asp-for="RollNo" class="form-control" /><span asp-validation-for="RollNo" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Class"></label></th>
            <td><input asp-for="Class" class="form-control" /><span asp-validation-for="Class" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Email"></label></th>
            <td><input asp-for="Email" class="form-control" /><span asp-validation-for="Email" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Phone"></label></th>
            <td><input asp-for="Phone" class="form-control" /><span asp-validation-for="Phone" style="color:red;"></span></td>
        </tr>

        <tr>
            <td colspan="2" class="text-center">
                <button type="submit" class="btn btn-warning">Save</button>
                <a asp-action="Index" class="btn btn-success">Cancel</a>
            </td>
        </tr>


    </table>

</form>

@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

views
students
delete.cshtml
@model StudentManagementSystem.Models.Student

<h1 class="text-center">Delete Student Data</h1>

<h2 class="text-center">Are You Sure You Want To Delete Student Data?</h2>

<form asp-action="Delete" method="post" class="form-control">
    <input type="hidden" asp-for="Id" />

    <table class="table table-bordered">

        <tr>
            <th><label asp-for="Name"></label></th>
            <td><input asp-for="Name" class="form-control" /><span asp-validation-for="Name" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="RollNo"></label></th>
            <td><input asp-for="RollNo" class="form-control" /><span asp-validation-for="RollNo" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Class"></label></th>
            <td><input asp-for="Class" class="form-control" /><span asp-validation-for="Class" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Email"></label></th>
            <td><input asp-for="Email" class="form-control" /><span asp-validation-for="Email" style="color:red;"></span></td>
        </tr>

        <tr>
            <th><label asp-for="Phone"></label></th>
            <td><input asp-for="Phone" class="form-control" /><span asp-validation-for="Phone" style="color:red;"></span></td>
        </tr>

        <tr>
            <td colspan="2" class="text-center">
                <button type="submit" class="btn btn-warning">Delete</button>
                <a asp-action="Index" class="btn btn-success">Cancel</a>
            </td>
        </tr>


    </table>

</form>

views
students
summary.cshtml
@model IEnumerable<StudentManagementSystem.Models.StudentSummaryViewModel>

<h2>Students Summary</h2>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Student ID</th>
            <th>Name</th>
            <th>Subjects</th>
            <th>Total Marks</th>
            <th>Max Marks</th>
            <th>Percentage</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var s in Model)
        {
            <tr>
                <td>@s.Id</td>
                <td>@s.Name</td>
                <td>@s.SubjectsCount</td>
                <td>@s.TotalMarks</td>
                <td>@s.MaxMarks</td>
                <td>@s.Percentage %</td>
            </tr>
        }
    </tbody>
</table>

views
students
dbinitializer.cs
using StudentManagementSystem.Data;
using StudentManagementSystem.Models;

namespace StudentManagementSystem.Data
{
	public static class DbInitializer
	{
		public static void Seed(AppDbContext context)
		{
			// Agar table me already data hai to kuch mat karo
			if (context.Students.Any())
				return;

			var students = new List<Student>
			{
				new Student{Name="Student1", Email="student1@gmail.com", Phone="03111111111", Class="Nursery", RollNo=78585},
				new Student{Name="Student2", Email="student2@gmail.com", Phone="03222222222", Class="Kindergarten", RollNo=12589},
				new Student{Name="Student3", Email="student3@gmail.com", Phone="03333333333", Class="Class1", RollNo=25845},
				new Student{Name="Student4", Email="student4@gmail.com", Phone="03444444444", Class="Class2", RollNo=25752},
				new Student{Name="Student5", Email="student5@gmail.com", Phone="03555555555", Class="Class3", RollNo=25456}
			};

			context.Students.AddRange(students);
			context.SaveChanges();
		}
	}
}

views
students
details.cshtml
@model StudentManagementSystem.Models.Student

<h3>Results</h3>
<p>
    <a asp-controller="Results" asp-action="Create" asp-route-studentId="@Model.Id" class="btn btn-success">Add Result</a>
</p>

@if (Model.Results != null && Model.Results.Any())
{
    <table class="table table-bordered">
        <thead><tr><th>Subject</th><th>Marks</th><th>Max</th><th>%</th><th>Action</th></tr></thead>
        <tbody>
            @foreach (var r in Model.Results)
            {
                var percent = r.MaxMarks > 0 ? Math.Round((double)r.Marks / r.MaxMarks * 100, 2) : 0;
                <tr>
                    <td>@r.Subject</td>
                    <td>@r.Marks</td>
                    <td>@r.MaxMarks</td>
                    <td>@percent %</td>
                    <td>
                        <a asp-controller="Results" asp-action="Edit" asp-route-id="@r.Id" class="btn btn-sm btn-warning">Edit</a>
                        <a asp-controller="Results" asp-action="Delete" asp-route-id="@r.Id" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            @{
                var total = Model.Results.Sum(x => x.Marks);
                var maxTotal = Model.Results.Sum(x => x.MaxMarks);
                var overallPercent = maxTotal > 0 ? Math.Round((double)total / maxTotal * 100, 2) : 0;
            }
            <tr>
                <th>Total</th>
                <th>@total</th>
                <th>@maxTotal</th>
                <th>@overallPercent %</th>
                <th></th>
            </tr>
        </tfoot>
    </table>
}
else
{
    <p>No results yet for this student.</p>
}


views folder
result folder
create.cshtml
@model StudentManagementSystem.Models.StudentResult
@{
    ViewData["Title"] = "Add Result";
}

<h2>Add Result</h2>

<form asp-action="Create" method="post">
    <div class="form-group">
        <label asp-for="StudentId"></label>
        <select asp-for="StudentId" class="form-control" asp-items="@(ViewData["Students"] as SelectList)"></select>
    </div>
    <div class="form-group">
        <label asp-for="Subject"></label>
        <input asp-for="Subject" class="form-control" />
        <span asp-validation-for="Subject" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Marks"></label>
        <input asp-for="Marks" class="form-control" />
        <span asp-validation-for="Marks" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="MaxMarks"></label>
        <input asp-for="MaxMarks" class="form-control" />
        <span asp-validation-for="MaxMarks" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-action="Index" class="btn btn-secondary">Back</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
